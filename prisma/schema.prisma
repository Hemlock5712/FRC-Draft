generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String             @id @default(cuid())
  name                String?
  email               String?            @unique
  emailVerified       DateTime?
  image               String?
  password            String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  username            String?            @unique
  bio                 String?
  location            String?
  team                String?
  role                String?            @default("user")
  preferences         Json?              @default("{}")
  accounts            Account[]
  draftParticipations DraftParticipant[]
  DraftRoom           DraftRoom[]
  sessions            Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Team {
  id         String          @id
  teamNumber Int             @unique
  name       String
  city       String?
  stateProv  String?
  country    String?
  rookieYear Int?
  website    String?
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  draftPicks DraftPick[]
  seasonData TeamSeasonData?
}

model TeamSeasonData {
  id              String   @id @default(cuid())
  teamId          String   @unique
  eventCount      Int      @default(0)
  totalRPs        Float    @default(0)
  avgRPs          Float    @default(0)
  totalMatchScore Float    @default(0)
  avgMatchScore   Float    @default(0)
  wins            Int      @default(0)
  losses          Int      @default(0)
  ties            Int      @default(0)
  districtRank    Int?
  regionalWins    Int      @default(0)
  lastUpdated     DateTime @default(now())
  awards2024      Award[]
  team            Team     @relation(fields: [teamId], references: [id])
}

model Award {
  id           String         @id @default(cuid())
  teamSeasonId String
  eventKey     String
  awardType    Int
  name         String
  receivedAt   DateTime       @default(now())
  teamSeason   TeamSeasonData @relation(fields: [teamSeasonId], references: [id])
}

model DraftRoom {
  id               String             @id @default(cuid())
  name             String
  description      String?
  createdBy        String
  status           String             @default("PENDING")
  startTime        DateTime?
  endTime          DateTime?
  maxTeams         Int                @default(8)
  pickTimeSeconds  Int                @default(120)
  snakeFormat      Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  DraftParticipant DraftParticipant[]
  DraftPick        DraftPick[]
  User             User               @relation(fields: [createdBy], references: [id])
}

model DraftParticipant {
  id          String      @id @default(cuid())
  userId      String
  draftRoomId String
  pickOrder   Int
  isReady     Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  DraftRoom   DraftRoom   @relation(fields: [draftRoomId], references: [id])
  user        User        @relation(fields: [userId], references: [id])
  picks       DraftPick[]

  @@unique([draftRoomId, pickOrder])
  @@unique([draftRoomId, userId])
}

model DraftPick {
  id            String           @id @default(cuid())
  draftRoomId   String
  participantId String
  teamId        String
  pickNumber    Int
  roundNumber   Int
  pickedAt      DateTime         @default(now())
  DraftRoom     DraftRoom        @relation(fields: [draftRoomId], references: [id])
  participant   DraftParticipant @relation(fields: [participantId], references: [id])
  team          Team             @relation(fields: [teamId], references: [id])

  @@unique([draftRoomId, pickNumber])
  @@unique([draftRoomId, teamId])
}

model SyncState {
  id             String   @id @default(cuid())
  type           String   @unique
  lastSyncTime   DateTime
  syncInProgress Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
